# frozen_string_literal: true

# server-based syntax
# ======================
## STAGE_NAME is a paramter from Jenkins job: "staging", "qc", and "testing"
set :stage_case, ENV['STAGE_NAME']

## set :qc_server_ip, Rails.application.credentials.dig(:deploy,:qc,:server)
## set :staging_server_ip , Rails
# set :server_ip, Rails.application.credentials.dig(:deploy,"#{fetch(:stage_case)}".to_sym,  :server)
set :user, Rails.application.credentials.dig("deploy_#{fetch(:stage_case)}".to_sym, :user)
set :server_ip, Rails.application.credentials.dig("deploy_#{fetch(:stage_case)}".to_sym, :server)
set :ssh_key, Rails.application.credentials.dig("deploy_#{fetch(:stage_case)}".to_sym, :ssh_key)
# set :deploy_to, "/home/#{fetch(:my_user)}/railsApps/#{fetch(:application)}"
set :deploy_to, "/home/#{fetch(:user)}/railsApps/#{fetch(:application)}"

# set :branch, 'master'
set :branch, 'capistrano'

set :rvm_installed, "/home/#{fetch(:user)}/.rvm/bin/rvm"
# set :rvm_installed, '/home/deployer/.rvm/bin/rvm'
set :rvm_ruby_version, File.read(File.expand_path('./../.ruby-version', __dir__)).strip
set :rvm_bundle_version, File.read(File.expand_path('./Gemfile.lock'))[-10..-1].strip

# role-based syntax
# ==================
role :app, ["#{fetch(:user)}@#{fetch(:server_ip)}"]
role :web, ["#{fetch(:user)}@#{fetch(:server_ip)}"]
role :db,  ["#{fetch(:user)}@#{fetch(:server_ip)}"]

## When Capistrano tries to delete old release, puma socket/id can be removed only by sudo user.
## Allow current user to run it with sudo priviledge.
SSHKit.config.command_map[:rm] = 'sudo rm'

# Custom SSH Options
# SSH to remote server uses username/password.
# For security reason, here uses ssh key.

server fetch(:server_ip).to_s, {
  :user => fetch(:user).to_s,
  :role => %w(app db web),
  :ssh_options => {
    :keys => fetch(:ssh_key).to_s
  }
}

# Costomized tasks that restart our services
namespace :boston_library do
  desc 'Gem update'
  task :gem_update do
    on roles(:app) do
      execute("#{fetch(:rvm_installed)} #{fetch(:rvm_ruby_version)} do gem update --system --no-document")
    end
  end

  desc 'Install new ruby if ruby-version is required'
  task :rvm_install_ruby do
    on roles(:app) do
      execute("#{fetch(:rvm_installed)} install #{fetch(:rvm_ruby_version)} -C --with-jemalloc")
      execute("#{fetch(:rvm_installed)} use #{fetch(:rvm_ruby_version)}")
    end
  end

  # desc 'Install bundler 2.3.26'
  desc "Install bundler #{fetch(:rvm_bundle_version)}"
  task :install_bundler do
    on roles(:app) do
      execute("#{fetch(:rvm_installed)} #{fetch(:rvm_ruby_version)} do gem install bundler:#{fetch(:rvm_bundle_version)}")
    end
  end

  # desc 'Your bin/bundle was not generated by Bundler, so this binstub cannot run.'
  desc 'Replace -bin/bundle- by running -bundle binstubs bundler --force-'
  task :binstubs_bundler do
    on roles(:app) do
      execute("cd '#{release_path}'; #{fetch(:rvm_installed)} #{fetch(:rvm_ruby_version)} do bundle binstubs bundler --force")
    end
  end

  desc 'Copy Gemfile and Gemfile.lock to shared directory'
  task :upload_gemfile do
    on roles(:app) do
      %w( Gemfile Gemfile.lock ).each do |f|
        upload! ENV['PWD'] + '/' + f, "#{shared_path}/" + f
      end
    end
  end

  desc "#{fetch(:application)} restart #{fetch(:application)}_puma service"
  task :"restart_#{fetch(:application)}_puma" do
    on roles(:app), in: :sequence, wait: 5 do
      execute "sudo /bin/systemctl restart #{fetch(:application)}_puma.socket #{fetch(:application)}_puma.service"
      sleep(5)
    end
  end

  desc 'Capistrano restarts nginx services'
  task :restart_nginx do
    on roles(:app), in: :sequence, wait: 5 do
      execute 'sudo /bin/systemctl reload nginx.service'
    end
  end
end

after :'deploy:updating', :'boston_library:gem_update'
after :'boston_library:gem_update', :'boston_library:rvm_install_ruby'
after :'boston_library:rvm_install_ruby', :'boston_library:install_bundler'
after :'boston_library:install_bundler', :'bundler:config'
after :'bundler:config', :'bundler:install'
before :'deploy:cleanup', :'boston_library:upload_gemfile'
after :'deploy:cleanup', :"boston_library:restart_#{fetch(:application)}_puma"
after :"boston_library:restart_#{fetch(:application)}_puma", :'boston_library:restart_nginx'